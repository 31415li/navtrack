/*
 * Generated by orval v5.5.10 üç∫
 * Do not edit manually.
 * Navtrack.App
 * OpenAPI spec version: 1.0
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions
} from 'react-query'
import type {
  ChangePasswordModel,
  RegisterAccountModel,
  AssetList,
  ProblemDetails,
  Asset,
  ErrorModel,
  AddAssetModel,
  UpdateAssetModel,
  LocationList,
  GetAssetsAssetIdLocationsParams,
  AssetUsersModel,
  AddUserToAssetModel,
  TripList,
  GetAssetsAssetIdTripsParams,
  GetAssetsAssetIdReportsTimedistanceParams,
  DeviceTypesModel,
  ProtocolsModel,
  CurrentUser,
  UpdateUserModel
} from './model'
import { authAxiosInstance } from './authAxiosInstance'


type AsyncReturnType<
T extends (...args: any) => Promise<any>,
U = unknown
> = T extends (...args: any) => Promise<infer R> ? (U extends R ? U : R) : any;


type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const postAccountPassword = <TData = void>(
    changePasswordModel: ChangePasswordModel,
 options?: SecondParameter<typeof authAxiosInstance>) => {
      return authAxiosInstance<TData>(
      {url: `/account/password`, method: 'post',
      data: changePasswordModel
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  


    export const usePostAccountPassword = <TData = AsyncReturnType<typeof postAccountPassword,void>,
    TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: ChangePasswordModel}, TContext>, request?: SecondParameter<typeof authAxiosInstance>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options || {}

      return useMutation<TData, TError, {data: ChangePasswordModel}, TContext>((props) => {
        const {data} = props || {};

        return  postAccountPassword<TData>(data,requestOptions)
      }, mutationOptions)
    }
    export const postAccount = <TData = void>(
    registerAccountModel: RegisterAccountModel,
 options?: SecondParameter<typeof authAxiosInstance>) => {
      return authAxiosInstance<TData>(
      {url: `/account`, method: 'post',
      data: registerAccountModel
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  


    export const usePostAccount = <TData = AsyncReturnType<typeof postAccount,void>,
    TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: RegisterAccountModel}, TContext>, request?: SecondParameter<typeof authAxiosInstance>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options || {}

      return useMutation<TData, TError, {data: RegisterAccountModel}, TContext>((props) => {
        const {data} = props || {};

        return  postAccount<TData>(data,requestOptions)
      }, mutationOptions)
    }
    export const getAssets = <TData = AssetList>(
    
 options?: SecondParameter<typeof authAxiosInstance>) => {
      return authAxiosInstance<TData>(
      {url: `/assets`, method: 'get'
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  

export const getGetAssetsQueryKey = () => [`/assets`]

    
export const useGetAssets = <TQueryFnData = AsyncReturnType<typeof getAssets, AssetList>, TError = ProblemDetails, TData = TQueryFnData>(
  options?: { query?:UseQueryOptions<TQueryFnData, TError, TData>, request?: SecondParameter<typeof authAxiosInstance>}

  ) => {

  const {query: queryOptions, request: requestOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetAssetsQueryKey();

  const query = useQuery<TQueryFnData, TError, TData>(queryKey, () => getAssets<TQueryFnData>(requestOptions), queryOptions )

  return {
    queryKey,
    ...query
  }
}

export const postAssets = <TData = Asset>(
    addAssetModel: AddAssetModel,
 options?: SecondParameter<typeof authAxiosInstance>) => {
      return authAxiosInstance<TData>(
      {url: `/assets`, method: 'post',
      data: addAssetModel
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  


    export const usePostAssets = <TData = AsyncReturnType<typeof postAssets,Asset>,
    TError = ErrorModel,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: AddAssetModel}, TContext>, request?: SecondParameter<typeof authAxiosInstance>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options || {}

      return useMutation<TData, TError, {data: AddAssetModel}, TContext>((props) => {
        const {data} = props || {};

        return  postAssets<TData>(data,requestOptions)
      }, mutationOptions)
    }
    export const getAssetsAssetId = <TData = Asset>(
    assetId: string,
 options?: SecondParameter<typeof authAxiosInstance>) => {
      return authAxiosInstance<TData>(
      {url: `/assets/${assetId}`, method: 'get'
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  

export const getGetAssetsAssetIdQueryKey = (assetId: string,) => [`/assets/${assetId}`]

    
export const useGetAssetsAssetId = <TQueryFnData = AsyncReturnType<typeof getAssetsAssetId, Asset>, TError = ProblemDetails, TData = TQueryFnData>(
 assetId: string, options?: { query?:UseQueryOptions<TQueryFnData, TError, TData>, request?: SecondParameter<typeof authAxiosInstance>}

  ) => {

  const {query: queryOptions, request: requestOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetAssetsAssetIdQueryKey(assetId);

  const query = useQuery<TQueryFnData, TError, TData>(queryKey, () => getAssetsAssetId<TQueryFnData>(assetId, requestOptions), {enabled: !!(assetId), ...queryOptions} )

  return {
    queryKey,
    ...query
  }
}

export const patchAssetsAssetId = <TData = void>(
    assetId: string,
    updateAssetModel: UpdateAssetModel,
 options?: SecondParameter<typeof authAxiosInstance>) => {
      return authAxiosInstance<TData>(
      {url: `/assets/${assetId}`, method: 'patch',
      data: updateAssetModel
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  


    export const usePatchAssetsAssetId = <TData = AsyncReturnType<typeof patchAssetsAssetId,void>,
    TError = ProblemDetails,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{assetId: string;data: UpdateAssetModel}, TContext>, request?: SecondParameter<typeof authAxiosInstance>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options || {}

      return useMutation<TData, TError, {assetId: string;data: UpdateAssetModel}, TContext>((props) => {
        const {assetId,data} = props || {};

        return  patchAssetsAssetId<TData>(assetId,data,requestOptions)
      }, mutationOptions)
    }
    export const deleteAssetsAssetId = <TData = void>(
    assetId: string,
 options?: SecondParameter<typeof authAxiosInstance>) => {
      return authAxiosInstance<TData>(
      {url: `/assets/${assetId}`, method: 'delete'
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  


    export const useDeleteAssetsAssetId = <TData = AsyncReturnType<typeof deleteAssetsAssetId,void>,
    TError = ProblemDetails,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{assetId: string}, TContext>, request?: SecondParameter<typeof authAxiosInstance>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options || {}

      return useMutation<TData, TError, {assetId: string}, TContext>((props) => {
        const {assetId} = props || {};

        return  deleteAssetsAssetId<TData>(assetId,requestOptions)
      }, mutationOptions)
    }
    export const getAssetsAssetIdLocations = <TData = LocationList>(
    assetId: string,
    params?: GetAssetsAssetIdLocationsParams,
 options?: SecondParameter<typeof authAxiosInstance>) => {
      return authAxiosInstance<TData>(
      {url: `/assets/${assetId}/locations`, method: 'get',
        params,
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  

export const getGetAssetsAssetIdLocationsQueryKey = (assetId: string,
    params?: GetAssetsAssetIdLocationsParams,) => [`/assets/${assetId}/locations`, ...(params ? [params]: [])]

    
export const useGetAssetsAssetIdLocations = <TQueryFnData = AsyncReturnType<typeof getAssetsAssetIdLocations, LocationList>, TError = ProblemDetails, TData = TQueryFnData>(
 assetId: string,
    params?: GetAssetsAssetIdLocationsParams, options?: { query?:UseQueryOptions<TQueryFnData, TError, TData>, request?: SecondParameter<typeof authAxiosInstance>}

  ) => {

  const {query: queryOptions, request: requestOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetAssetsAssetIdLocationsQueryKey(assetId,params);

  const query = useQuery<TQueryFnData, TError, TData>(queryKey, () => getAssetsAssetIdLocations<TQueryFnData>(assetId,params, requestOptions), {enabled: !!(assetId), ...queryOptions} )

  return {
    queryKey,
    ...query
  }
}

export const getAssetsAssetIdUsers = <TData = AssetUsersModel>(
    assetId: string,
 options?: SecondParameter<typeof authAxiosInstance>) => {
      return authAxiosInstance<TData>(
      {url: `/assets/${assetId}/users`, method: 'get'
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  

export const getGetAssetsAssetIdUsersQueryKey = (assetId: string,) => [`/assets/${assetId}/users`]

    
export const useGetAssetsAssetIdUsers = <TQueryFnData = AsyncReturnType<typeof getAssetsAssetIdUsers, AssetUsersModel>, TError = ProblemDetails, TData = TQueryFnData>(
 assetId: string, options?: { query?:UseQueryOptions<TQueryFnData, TError, TData>, request?: SecondParameter<typeof authAxiosInstance>}

  ) => {

  const {query: queryOptions, request: requestOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetAssetsAssetIdUsersQueryKey(assetId);

  const query = useQuery<TQueryFnData, TError, TData>(queryKey, () => getAssetsAssetIdUsers<TQueryFnData>(assetId, requestOptions), {enabled: !!(assetId), ...queryOptions} )

  return {
    queryKey,
    ...query
  }
}

export const postAssetsAssetIdUsers = <TData = void>(
    assetId: string,
    addUserToAssetModel: AddUserToAssetModel,
 options?: SecondParameter<typeof authAxiosInstance>) => {
      return authAxiosInstance<TData>(
      {url: `/assets/${assetId}/users`, method: 'post',
      data: addUserToAssetModel
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  


    export const usePostAssetsAssetIdUsers = <TData = AsyncReturnType<typeof postAssetsAssetIdUsers,void>,
    TError = ErrorModel,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{assetId: string;data: AddUserToAssetModel}, TContext>, request?: SecondParameter<typeof authAxiosInstance>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options || {}

      return useMutation<TData, TError, {assetId: string;data: AddUserToAssetModel}, TContext>((props) => {
        const {assetId,data} = props || {};

        return  postAssetsAssetIdUsers<TData>(assetId,data,requestOptions)
      }, mutationOptions)
    }
    export const deleteAssetsAssetIdUsersUserId = <TData = void>(
    assetId: string,
    userId: string,
 options?: SecondParameter<typeof authAxiosInstance>) => {
      return authAxiosInstance<TData>(
      {url: `/assets/${assetId}/users/${userId}`, method: 'delete'
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  


    export const useDeleteAssetsAssetIdUsersUserId = <TData = AsyncReturnType<typeof deleteAssetsAssetIdUsersUserId,void>,
    TError = ErrorModel,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{assetId: string;userId: string}, TContext>, request?: SecondParameter<typeof authAxiosInstance>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options || {}

      return useMutation<TData, TError, {assetId: string;userId: string}, TContext>((props) => {
        const {assetId,userId} = props || {};

        return  deleteAssetsAssetIdUsersUserId<TData>(assetId,userId,requestOptions)
      }, mutationOptions)
    }
    export const getAssetsAssetIdTrips = <TData = TripList>(
    assetId: string,
    params?: GetAssetsAssetIdTripsParams,
 options?: SecondParameter<typeof authAxiosInstance>) => {
      return authAxiosInstance<TData>(
      {url: `/assets/${assetId}/trips`, method: 'get',
        params,
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  

export const getGetAssetsAssetIdTripsQueryKey = (assetId: string,
    params?: GetAssetsAssetIdTripsParams,) => [`/assets/${assetId}/trips`, ...(params ? [params]: [])]

    
export const useGetAssetsAssetIdTrips = <TQueryFnData = AsyncReturnType<typeof getAssetsAssetIdTrips, TripList>, TError = ProblemDetails, TData = TQueryFnData>(
 assetId: string,
    params?: GetAssetsAssetIdTripsParams, options?: { query?:UseQueryOptions<TQueryFnData, TError, TData>, request?: SecondParameter<typeof authAxiosInstance>}

  ) => {

  const {query: queryOptions, request: requestOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetAssetsAssetIdTripsQueryKey(assetId,params);

  const query = useQuery<TQueryFnData, TError, TData>(queryKey, () => getAssetsAssetIdTrips<TQueryFnData>(assetId,params, requestOptions), {enabled: !!(assetId), ...queryOptions} )

  return {
    queryKey,
    ...query
  }
}

export const getAssetsAssetIdReportsTimedistance = <TData = TripList>(
    assetId: string,
    params?: GetAssetsAssetIdReportsTimedistanceParams,
 options?: SecondParameter<typeof authAxiosInstance>) => {
      return authAxiosInstance<TData>(
      {url: `/assets/${assetId}/reports/time-distance`, method: 'get',
        params,
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  

export const getGetAssetsAssetIdReportsTimedistanceQueryKey = (assetId: string,
    params?: GetAssetsAssetIdReportsTimedistanceParams,) => [`/assets/${assetId}/reports/time-distance`, ...(params ? [params]: [])]

    
export const useGetAssetsAssetIdReportsTimedistance = <TQueryFnData = AsyncReturnType<typeof getAssetsAssetIdReportsTimedistance, TripList>, TError = ProblemDetails, TData = TQueryFnData>(
 assetId: string,
    params?: GetAssetsAssetIdReportsTimedistanceParams, options?: { query?:UseQueryOptions<TQueryFnData, TError, TData>, request?: SecondParameter<typeof authAxiosInstance>}

  ) => {

  const {query: queryOptions, request: requestOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetAssetsAssetIdReportsTimedistanceQueryKey(assetId,params);

  const query = useQuery<TQueryFnData, TError, TData>(queryKey, () => getAssetsAssetIdReportsTimedistance<TQueryFnData>(assetId,params, requestOptions), {enabled: !!(assetId), ...queryOptions} )

  return {
    queryKey,
    ...query
  }
}

export const getDevicesTypes = <TData = DeviceTypesModel>(
    
 options?: SecondParameter<typeof authAxiosInstance>) => {
      return authAxiosInstance<TData>(
      {url: `/devices/types`, method: 'get'
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  

export const getGetDevicesTypesQueryKey = () => [`/devices/types`]

    
export const useGetDevicesTypes = <TQueryFnData = AsyncReturnType<typeof getDevicesTypes, DeviceTypesModel>, TError = ProblemDetails, TData = TQueryFnData>(
  options?: { query?:UseQueryOptions<TQueryFnData, TError, TData>, request?: SecondParameter<typeof authAxiosInstance>}

  ) => {

  const {query: queryOptions, request: requestOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetDevicesTypesQueryKey();

  const query = useQuery<TQueryFnData, TError, TData>(queryKey, () => getDevicesTypes<TQueryFnData>(requestOptions), queryOptions )

  return {
    queryKey,
    ...query
  }
}

export const getHealth = <TData = void>(
    
 options?: SecondParameter<typeof authAxiosInstance>) => {
      return authAxiosInstance<TData>(
      {url: `/health`, method: 'get'
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  

export const getGetHealthQueryKey = () => [`/health`]

    
export const useGetHealth = <TQueryFnData = AsyncReturnType<typeof getHealth, void>, TError = unknown, TData = TQueryFnData>(
  options?: { query?:UseQueryOptions<TQueryFnData, TError, TData>, request?: SecondParameter<typeof authAxiosInstance>}

  ) => {

  const {query: queryOptions, request: requestOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetHealthQueryKey();

  const query = useQuery<TQueryFnData, TError, TData>(queryKey, () => getHealth<TQueryFnData>(requestOptions), queryOptions )

  return {
    queryKey,
    ...query
  }
}

export const getProtocols = <TData = ProtocolsModel>(
    
 options?: SecondParameter<typeof authAxiosInstance>) => {
      return authAxiosInstance<TData>(
      {url: `/protocols`, method: 'get'
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  

export const getGetProtocolsQueryKey = () => [`/protocols`]

    
export const useGetProtocols = <TQueryFnData = AsyncReturnType<typeof getProtocols, ProtocolsModel>, TError = ProblemDetails, TData = TQueryFnData>(
  options?: { query?:UseQueryOptions<TQueryFnData, TError, TData>, request?: SecondParameter<typeof authAxiosInstance>}

  ) => {

  const {query: queryOptions, request: requestOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetProtocolsQueryKey();

  const query = useQuery<TQueryFnData, TError, TData>(queryKey, () => getProtocols<TQueryFnData>(requestOptions), queryOptions )

  return {
    queryKey,
    ...query
  }
}

export const getUser = <TData = CurrentUser>(
    
 options?: SecondParameter<typeof authAxiosInstance>) => {
      return authAxiosInstance<TData>(
      {url: `/user`, method: 'get'
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  

export const getGetUserQueryKey = () => [`/user`]

    
export const useGetUser = <TQueryFnData = AsyncReturnType<typeof getUser, CurrentUser>, TError = void, TData = TQueryFnData>(
  options?: { query?:UseQueryOptions<TQueryFnData, TError, TData>, request?: SecondParameter<typeof authAxiosInstance>}

  ) => {

  const {query: queryOptions, request: requestOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetUserQueryKey();

  const query = useQuery<TQueryFnData, TError, TData>(queryKey, () => getUser<TQueryFnData>(requestOptions), queryOptions )

  return {
    queryKey,
    ...query
  }
}

export const patchUser = <TData = void>(
    updateUserModel: UpdateUserModel,
 options?: SecondParameter<typeof authAxiosInstance>) => {
      return authAxiosInstance<TData>(
      {url: `/user`, method: 'patch',
      data: updateUserModel
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  


    export const usePatchUser = <TData = AsyncReturnType<typeof patchUser,void>,
    TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: UpdateUserModel}, TContext>, request?: SecondParameter<typeof authAxiosInstance>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options || {}

      return useMutation<TData, TError, {data: UpdateUserModel}, TContext>((props) => {
        const {data} = props || {};

        return  patchUser<TData>(data,requestOptions)
      }, mutationOptions)
    }
    